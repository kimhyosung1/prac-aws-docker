name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/nest-auto-deploy
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # github repository에서 checkout
      - uses: actions/checkout@v2

      # # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          # username: ${{ github.actor }}
          # password: ${{ secrets.GIT_ACCESS_TOKEN }}
          username: stop7089
          password: rlagytjd9041!
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_ACCESS_TOKEN }}
      # 3000 -> 8080 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8080:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest

# name: Docker Build & Deploy for EC2

# on:
#   push:
#     branches:
#       - 'main'
#       # - 'develop'
#       # - 'staging'
#       # - 'production'
#       # - 'preproduction'

# jobs:
#   build:
#     name: docker build and push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Import PGP(gpg) credentials
#         run: |
#           echo -e "$PGP_PRIVATE_KEY" | gpg --import
#         env:
#           PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}

#       - name: Ckeck GPG Key
#         run: |
#           gpg --version
#           gpg --list-key stop70899@naver.com

#       - name: Install sops
#         env:
#           SOPS_VERSION: v3.7.1
#         run: |
#           wget https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux
#           chmod +x ./sops-${SOPS_VERSION}.linux
#           sudo mv ./sops-${SOPS_VERSION}.linux /usr/local/bin/sops

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-northeast-2

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Generate Pem
#         env:
#           PEM: ${{ secrets.SSH_PEM_KEY }}
#         run: |
#           echo -e "$PEM" > hello-aws-pi.pem
#           chmod 400 hello-aws-pi.pem

#       # - name: create env file
#       #   run: |
#       #     touch main.env
#       #     cat << EOF >> main.env

#       # - name: Decrypt main.env file
#       #   if: contains(github.ref, 'develop')
#       #   run: |
#       #     sops --input-type dotenv --output-type dotenv -d main.env.encrypted > main.env

#       # - name: main Run Deploy Script
#       #   if: contains(github.ref, 'main')
#       #   env:
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   run: |
#       #     bash ./deploy.sh main

#       # - name: Decrypt fcm service account json
#       #   env:
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   run: |
#       #     sops --input-type json --output-type json -d firebase.json.encrypted > firebase.json

#       # - name: Decrypt development.env, Docker build and push image to Amazon ECR and Development Deploy
#       #   env:
#       #     ECR: ${{ steps.login-ecr.outputs.registry }}
#       #     TAG: ${{ github.sha }}
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   if: ${{ github.ref == 'refs/heads/develop' }}
#       #   run: |
#       #     sops --input-type dotenv --output-type dotenv -d development.env.encrypted > development.env
#       #     echo "== build ======================================================="
#       #     docker build --build-arg NODE_ENV=development -t ${ECR}/capa:development -t ${ECR}/capa:development-${TAG} .
#       #     echo "== push ========================================================"
#       #     docker push ${ECR}/capa --all-tags
#       #     bash ./deploy.sh development

#       # - name: Decrypt staging.env, Docker build and push image to Amazon ECR and Staging Deploy
#       #   env:
#       #     ECR: ${{ steps.login-ecr.outputs.registry }}
#       #     TAG: ${{ github.sha }}
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   if: ${{ github.ref == 'refs/heads/staging' }}
#       #   run: |
#       #     sops --input-type dotenv --output-type dotenv -d staging.env.encrypted > staging.env
#       #     echo "== build ======================================================="
#       #     docker build --build-arg NODE_ENV=staging -t ${ECR}/capa:latest -t ${ECR}/capa:staging -t ${ECR}/capa:staging-${TAG} .
#       #     echo "== push ========================================================"
#       #     docker push ${ECR}/capa --all-tags
#       #     bash ./deploy.sh staging

#       # - name: Decrypt production.env, Docker build and push image to Amazon ECR and Production Deploy
#       #   env:
#       #     ECR: ${{ steps.login-ecr.outputs.registry }}
#       #     TAG: ${{ github.sha }}
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   if: ${{ github.ref == 'refs/heads/production' }}
#       #   run: |
#       #     sops --input-type dotenv --output-type dotenv -d production.env.encrypted > production.env
#       #     echo "== build ======================================================="
#       #     docker build --build-arg NODE_ENV=production -t ${ECR}/capa:production -t ${ECR}/capa:production-${TAG} .
#       #     echo "== push ========================================================"
#       #     docker push ${ECR}/capa --all-tags
#       #     bash ./deploy.sh production

#       # - name: Decrypt preproduction.env, Docker build and push image to Amazon ECR and preproduction Deploy
#       #   env:
#       #     ECR: ${{ steps.login-ecr.outputs.registry }}
#       #     TAG: ${{ github.sha }}
#       #     PEM: ${{ secrets.SSH_PEM_KEY }}
#       #   if: ${{ github.ref == 'refs/heads/preproduction' }}
#       #   run: |
#       #     sops --input-type dotenv --output-type dotenv -d preproduction.env.encrypted > staging.env
#       #     echo "== build ======================================================="
#       #     docker build --build-arg NODE_ENV=staging -t ${ECR}/capa:preproduction -t ${ECR}/capa:preproduction-${TAG} .
#       #     echo "== push ========================================================"
#       #     docker push ${ECR}/capa --all-tags
#       #     bash ./deploy.sh preproduction


# $ docker login --username stop7089 -p $(aws ecr get-login-password --region ap-northeast-2) 591362340905.dkr.ecr.ap-northeast-2.amazonaws.com/